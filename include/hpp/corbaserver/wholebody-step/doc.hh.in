// Copyright (C) 2014 CNRS-LAAS
// Author: Florent Lamiraux.
//
// This file is part of the hpp-wholebody-step-corba.
//
// hpp-wholebody-step-corba is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// hpp-wholebody-step-corba is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with hpp-wholebody-step-corba.  If not, see
// <http://www.gnu.org/licenses/>.

/// \mainpage
///
/// \section hpp_wholebody_step_corba_intro Introduction
///
/// This package implements a Corba server running hpp-wholebody-step
/// package functions and the corresponding client.
///
/// The corba server part is compiled into library
/// \c libhpp-wholebody-step-corba.so that implements the following
/// class:
///   \li hpp::wholebodyStep::Server.
/// The corba services provided by the library are described in interface
///   \li hpp::WholebodyStep.
///
/// The client part is provided through python module
/// \c hpp.corbaserver.wholebody_step
///
/// An executable called \c hpp-wholebody-step-server is installed.
/// This executable runs
///   \li the corba server implemented by library
///       \c libhpp-wholebody-step-corba.so, as well as
///   \li the corba server implemented in \htmlonly<a class="el" href="@HPP_CORBASERVER_DOXYGENDOCDIR@/index.html">hpp-corbaserver</a>\endhtmlonly.
///
/// See these package documentations for details.
///
/// \section hpp_wholebody_step_corba_howto_communicate \
/// How to communicate with the CORBA server
///
/// The easiest way is
///
///     to launch \c hpp-wholebody-step-server executable,
///     open a python terminal and type:
///     \code
///     from hpp.corbaserver.wholebody_step.client import Client as WholebodyStepClient
///     wcl = WholebodyStepClient ()
///     \endcode
/// Then variable wcl contains a member \c problem that can send
/// requests to the server. For instance
///
///     \code
///     wcl.problem.addStaticStabilityConstraints (q0)
///     \endcode
///
/// \section how_to_embed How to embed a server in an application
///
/// Embedding the corba server into an application can be done by linking the
/// application with \c libhpp-wholebody-step-corba.so in a similar way as
/// hpp-corbaserver corba server. See documentation of classes
/// hpp::corbaServer::Server and hpp::wholebodyStep::Server for details.
